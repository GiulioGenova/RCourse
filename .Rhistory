df_stats <- df %>% group_by(landuse) %>%
summarise_at(vars(cu,som,ph,p,k,clay,sand),
list(
min = ~min(.,na.rm = T),
q1= ~quantile(.,na.rm = T)[2],
mean = ~mean(.,na.rm = T),
q3= ~quantile(.,na.rm = T)[4],
max  = ~max(.,na.rm = T)
)
)# %>% gather(key,value,-TipoColtura)
View(df_stats)
df_orch = filter(df,landuse == "Orchards")
asym=c(1,2)# 23 wich columns in the db will be treated as asymmetric binary
dist = daisy(df_orch, metric="gower",type=list(asym=asym))
dist
hc = hclust(dist,method = "complete")
wss = fviz_nbclust(df_orch,diss = dist,FUNcluster = hcut,method = "wss")
wss
wss = fviz_nbclust(df_orch,diss = dist,FUNcluster = hcut,method = "wss")
wss
#' ---
#' title: "Cluster Analysis - lecture code"
#' author: "Giulio Genova - giulio.genova@eurac.edu"
#' date: "2020-04-21"
#' output:
#'   html_document:
#'     toc: true
#'     toc_float: true
#' ---
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(lubridate)
library(cluster)
library(dendextend)
library(factoextra)
library(ggpubr)
df=read.csv("data/soil_data.csv")
df = select(df, landuse, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg, clay, sand)
fct_count(df$landuse,sort = T)
fct_count(df$texture,sort = T)
df = filter(df,#landuse == "Orchards",
! texture %in% c("Ls3","Slu","Lu","Sl4","Lt3"))
fct_count(df$texture,sort = T)
df_n <- df %>% group_by(landuse) %>%
summarise(n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
df_stats <- df %>% group_by(landuse) %>%
summarise_at(vars(cu,som,ph,p,k,clay,sand),
list(
min = ~min(.,na.rm = T),
q1= ~quantile(.,na.rm = T)[2],
mean = ~mean(.,na.rm = T),
q3= ~quantile(.,na.rm = T)[4],
max  = ~max(.,na.rm = T)
)
)# %>% gather(key,value,-TipoColtura)
#' Filter for high values of copper
df_high_cu <- df %>% group_by(landuse) %>%
filter(cu >= 200)
df_high_cu %>% summarise(min=min(cu,na.rm = T),
q1=quantile(cu,na.rm = T)[2],
mean=mean(cu,na.rm = T),
q3=quantile(cu,na.rm = T)[4],
max=max(cu,na.rm = T),
n=n())
#' Some exploratory plots
df %>%
ggplot(aes(x=cu))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
df %>%
ggplot(aes(x=ph))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
df %>%
ggplot(aes(x=clay))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
#' # Cluster Analysis
df_orch = filter(df,landuse == "Orchards")
asym=c(1,2)# 23 wich columns in the db will be treated as asymmetric binary
dist = daisy(df_orch, metric="gower",type=list(asym=asym))
hc = hclust(dist,method = "complete")
# dist = daisy(df_orch,metric="euclidean",stand = T)
# hc = hclust(dist,method = "ward.D")
wss = fviz_nbclust(df_orch,diss = dist,FUNcluster = hcut,method = "wss")
wss
dend<- hc %>% as.dendrogram %>%
dendextend::set("branches_k_color", k=k) %>%
dendextend::set("branches_lwd", 1.2) %>%
dendextend::set("labels",NULL)
k=5 # number of clusters
dend<- hc %>% as.dendrogram %>%
dendextend::set("branches_k_color", k=k) %>%
dendextend::set("branches_lwd", 1.2) %>%
dendextend::set("labels",NULL)
plot(dend)
k=7 # number of clusters
dend<- hc %>% as.dendrogram %>%
dendextend::set("branches_k_color", k=k) %>%
dendextend::set("branches_lwd", 1.2) %>%
dendextend::set("labels",NULL)
plot(dend)
cluster = cutree(hc,k)
cluster = tibble::enframe(cluster,name=NULL,value="cluster")
df_orch_c = bind_cols(df_orch,cluster)
View(df_orch_c)
fct_count(factor(df_orch_c$cluster),sort = T)
k=5 # number of clusters
dend<- hc %>% as.dendrogram %>%
dendextend::set("branches_k_color", k=k) %>%
dendextend::set("branches_lwd", 1.2) %>%
dendextend::set("labels",NULL)
plot(dend)
png("output/dend_4_orchards.png", width=1000, height=600, res=120)
plot(dend,main = "4 Clusters orchards ")
dev.off()
cluster = cutree(hc,k)
cluster = tibble::enframe(cluster,name=NULL,value="cluster")
df_orch_c = bind_cols(df_orch,cluster)
fct_count(factor(df_orch_c$cluster),sort = T)
box_clust_orch = df_orch_c %>%
#gather(Var, value,-cluster,-landuse) %>%
pivot_longer(!contains(c("landuse","cluster","texture")),
names_to = "Var", values_to = "value") %>%
ggplot(aes(y = value, x = as.factor(cluster) ))+
ggtitle("Boxplot of the main soil characteristics for each cluster. Orchards")+
xlab("clusters")+ylab(NULL)+
geom_boxplot()+
facet_wrap(~Var,scales = "free")+#,nrow = 2,ncol = 5
theme_classic()
box_clust_orch
ggplot(box_clust_orch,aes(ph,som,color = cluster))+
geom_point()+
theme_minimal()
ggplot(df_orch_c,aes(ph,som,color = cluster))+
geom_point()+
theme_minimal()
ggplot(df_orch_c,aes(ph,som,color = as.factor(cluster)))+
geom_point()+
theme_minimal()
ggplot(df_orch_c,aes(ph,cu,color = as.factor(cluster)))+
geom_point()+
theme_minimal()
ggplot(df_orch_c,aes(zn,cu,color = as.factor(cluster)))+
geom_point()+
theme_minimal()
ggplot(df_orch_c,aes(ph,mg,color = as.factor(cluster)))+
geom_point()+
theme_minimal()
rmarkdown::render("script/08_cluster_analysis.R",knit_root_dir = getwd())
install.packages("flextable")
install.packages("officer")
myft <- flextable(
head(df),
col_keys = colnames(df))
library(flextable)
library(flextable)
library(officer)
df = read.csv("data/soil_data.csv")
myft <- flextable(
head(df),
col_keys = colnames(df))
myft
df = read.csv("data/soil_data.csv")
df = select(df, landuse, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg, clay, sand)
myft <- flextable(
head(df),
col_keys = colnames(df))
myft
save_as_docx("my table" = myft, path = "output/doc_test")
save_as_docx("my table" = myft, path = "output/doc_test.docx")
df_grouped = group_by(df,landuse,texture)
df_grouped_summar = summarise(df_grouped,
cu_min = min(cu),
cu_mean = mean(cu),
cu_max = max(cu),
zn_min = min(zn),
zn_mean = mean(zn),
zn_max = max(zn))
View(df_grouped_summar)
myft_2 <- flextable(
df_grouped_summar
head(df)#,
#col_keys = colnames(df)
)
myft_2 <- flextable(
df_grouped_summar,
head(df)#,
#col_keys = colnames(df)
)
myft_2 <- flextable(
head(df_grouped_summar),
col_keys = colnames(df_grouped_summar)
)
myft_2
myft_2 <- flextable(
df_grouped_summar,
col_keys = colnames(df_grouped_summar)
)
myft_2
myft_2 <- flextable(
df_grouped_summar#,
#col_keys = colnames(df_grouped_summar)
)
myft_2
myft_2 <- flextable(df_grouped_summar)
myft_2
myft
View(df_grouped_summar)
myft_2 <- flextable(df_grouped_summar)
myft_2
save_as_docx("Summary for Cu and Zn" = myft_2, path = "output/doc_test_2.docx")
myft_3 <- merge_v(df_grouped_summar, j = c("landuse", "texture") )
myft_3 <- flextable(df_grouped_summar)
myft_3 <- merge_v(myft_3, j = c("landuse", "texture") )
myft_3 <- autofit(myft)
myft_3
myft_3 <- flextable(df_grouped_summar)
myft_3 <- merge_v(myft_3, j = c("landuse", "texture") )
myft_3 <- autofit(myft_3)
myft_3
save_as_docx("Summary for Cu and Zn" = myft_3,
path = "output/doc_test_3.docx")
round(df_grouped_summar$cu_mean,digits = 0)
round(df_grouped_summar$cu_mean,digits = 2)
df_grouped_summar$cu_mean
df_grouped_summar$cu_mean = round(df_grouped_summar$cu_mean,digits = 0)
df_grouped_summar$cu_mean
View(df_grouped_summar)
df_grouped_summar$zn_mean = round(df_grouped_summar$zn_mean,digits = 0)
View(df_grouped_summar)
myft_2 <- flextable(df_grouped_summar)
myft_2
myft_3 <- flextable(df_grouped_summar)
myft_3 <- merge_v(myft_3, j = c("landuse", "texture") )
myft_3 <- autofit(myft_3)
myft_3
save_as_docx("Summary for Cu and Zn" = myft_3,
path = "output/doc_test_3.docx")
rmarkdown::render(input = "script/09_flextable.R")
rmarkdown::render(input = "script/09_flextable.R",knit_root_dir = "/colud/project")
getwd()
rmarkdown::render(input = "script/09_flextable.R",knit_root_dir = getwd())
rmarkdown::render(input = "script/09_flextable.R",knit_root_dir = getwd())
#' ---
#' title: "What is a pipe in R - lecture code"
#' author: "Giulio Genova - giulio.genova@eurac.edu"
#' date: "2020-04-21"
#' output:
#'   html_document:
#'     toc: true
#'     toc_float: true
#' ---
#' Pipes
#' nice tutorial on pipes by Data Camp
#' https://www.datacamp.com/community/tutorials/pipe-r-tutorial
#' Pipe is implemented in the package magrittr
library(magrittr)
library(dplyr)
df = rename(df, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg)
#' This
group_by(df,landuse)
#' is equal to this
df %>% group_by(landuse)
#' This
summarise(.data = group_by(df,landuse), n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
#' is equal to this
df %>% group_by(landuse) %>%
summarise(n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
#' ---
#' title: "What is a pipe in R - lecture code"
#' author: "Giulio Genova - giulio.genova@eurac.edu"
#' date: "2020-04-21"
#' output:
#'   html_document:
#'     toc: true
#'     toc_float: true
#' ---
#' Pipes
#' nice tutorial on pipes by Data Camp
#' https://www.datacamp.com/community/tutorials/pipe-r-tutorial
#' Pipe is implemented in the package magrittr
library(magrittr)
library(dplyr)
df = read.csv("data/soil_data.csv")
df = rename(df, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg)
#' This
group_by(df,landuse)
#' is equal to this
df %>% group_by(landuse)
#' This
summarise(.data = group_by(df,landuse), n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
#' is equal to this
df %>% group_by(landuse) %>%
summarise(n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
rmarkdown::render("script/07_piping.R",knit_root_dir = getwd())
rmarkdown::render("script/08_cluster_analysis.R",knit_root_dir = getwd())
rmarkdown::render("script/07_piping.R",knit_root_dir = getwd())
savehistory("/cloud/project/.Rhistory")
install.packages("readxl")
rmarkdown::render("script/01_intro.R",knit_root_dir = getwd())
rmarkdown::render("script/00_intro.R",knit_root_dir = getwd())
rmarkdown::render("script/01_data_type.R",knit_root_dir = getwd())
rmarkdown::render("script/01_data_type.R",knit_root_dir = getwd())
rmarkdown::render("script/02_read_df_subset.R",knit_root_dir = getwd())
rmarkdown::render("script/03_data_wrangling.R",knit_root_dir = getwd())
rmarkdown::render("script/03_data_wrangling_adv.R",knit_root_dir = getwd())
rmarkdown::render("script/04_the_in_operator.R",knit_root_dir = getwd())
rmarkdown::render("script/04_the_in_operator.R",knit_root_dir = getwd())
rmarkdown::render("script/05_plot_basics.R",knit_root_dir = getwd())
rmarkdown::render("script/06_plot_examples.R",knit_root_dir = getwd())
rmarkdown::render("script/07_piping.R",knit_root_dir = getwd())
install.packages(c("dendextend","ggpubr","factoextra"))
rmarkdown::render("script/08_cluster_analysis.R",knit_root_dir = getwd())
install.packages("flextable")
install.packages("flextable")
rmarkdown::render("script/09_flextable.R",knit_root_dir = getwd())
rmarkdown::render("script/09_flextable.R",knit_root_dir = getwd())
#' # Libraries
#' We will use {dplyr}
library(dplyr)
df = read.csv("data/soil_data.csv")
df = rename(df, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg)
df_sel = dplyr::select(df,landuse, texture, ph, som, cu , zn)
df_sel_mut = mutate(df_sel, cu_log = log(cu), zn_log = log(zn))
df_sel_filt = filter(df_sel, cu > 400, ph <= 6.7)
df_sel_grouped  = group_by(df_sel,landuse)
df_sel_grouped_num = select_if(df_sel_grouped, is.numeric)
summarise_all(df_sel_grouped_num,
list(mean = ~mean(.,na.rm = TRUE)),min = ~min(.,na.rm = T))
summarise_all(df_sel_grouped_num,mean)
summarise_all(df_sel_grouped_num,list(mean = mean,min = min,max = max, n = length, sd = sd))
#' If you only have one function you can place the additional arguments of the
#' summary function as  the following
summarise_all(df_sel_grouped_num, list(Q3 = quantile), probs = 0.75)
rmarkdown::render("script/09_flextable.R",knit_root_dir = getwd())
rmarkdown::render("script/08_cluster_analysis.R",knit_root_dir = getwd())
library(forcats)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(lubridate)
library(cluster)
library(dendextend)
library(factoextra)
library(ggpubr)
#' # Read data
df=read.csv("data/soil_data.csv")
df = select(df, landuse, texture = textabbr_fingprob, ph = ph_cacl2, som = som_elmntprc,
p = p_calmg100g , k = k_calmg100g, mg = mg_catmgkg, b =  b_catmgkg ,
mn = mn_catmgkg,cu =  cu_catmgkg,zn =  zn_catmgkg, clay, sand)
#' # Preliminary analysis
fct_count(df$landuse,sort = T)
fct_count(df$texture,sort = T)
df = filter(df,#landuse == "Orchards",
! texture %in% c("Ls3","Slu","Lu","Sl4","Lt3"))
fct_count(df$texture,sort = T)
df_n <- df %>% group_by(landuse) %>%
summarise(n=n(),
Cu_below_25 = sum(cu<=25),
Cu_above_25 = sum(cu>25),
Cu_above_50 = sum(cu>50),
Cu_above_100 = sum(cu>100),
Cu_above_200 = sum(cu>200),
Cu_above_400 = sum(cu>400))
df_stats <- df %>% group_by(landuse) %>%
summarise_at(vars(cu,som,ph,p,k,clay,sand),
list(
min = ~min(.,na.rm = T),
q1= ~quantile(.,na.rm = T)[2],
mean = ~mean(.,na.rm = T),
q3= ~quantile(.,na.rm = T)[4],
max  = ~max(.,na.rm = T)
)
)# %>% gather(key,value,-TipoColtura)
#' Filter for high values of copper
df_high_cu <- df %>% group_by(landuse) %>%
filter(cu >= 200)
df_high_cu %>% summarise(min=min(cu,na.rm = T),
q1=quantile(cu,na.rm = T)[2],
mean=mean(cu,na.rm = T),
q3=quantile(cu,na.rm = T)[4],
max=max(cu,na.rm = T),
n=n())
#' Some exploratory plots
df %>%
ggplot(aes(x=cu))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
df %>%
ggplot(aes(x=ph))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
df %>%
ggplot(aes(x=clay))+
geom_density()+
facet_wrap(~landuse,scales = "free")+
theme_minimal()
#' # Cluster Analysis
df_orch = filter(df,landuse == "Orchards")
asym=c(1,2)# 23 wich columns in the db will be treated as asymmetric binary
#' create a dissimilarity matrix
dist = daisy(df_orch, metric="gower",type=list(asym=asym))
dist
#' create a dissimilarity matrix
distance = daisy(df_orch, metric="gower",type=list(asym=asym))
df_orch
View(df_orch)
daisy(df_orch)
#' create a dissimilarity matrix
distance = daisy(df_orch %>% select(-landuse,-texture), metric="gower")#,type=list(asym=asym)
#' run the hierarchical clustering function to get an object hclust
hc = hclust(distance,method = "complete")
wss = fviz_nbclust(df_orch,diss = dist,FUNcluster = hcut,method = "wss")
wss
hcut
dist
#' create a dissimilarity matrix
dist = daisy(df_orch %>% select(-landuse,-texture), metric="gower")#,type=list(asym=asym)
#' run the hierarchical clustering function to get an object hclust
hc = hclust(dist,method = "complete")
wss = fviz_nbclust(df_orch,diss = dist,FUNcluster = hcut,method = "wss")
wss
k=5 # number of clusters
dend<- hc %>% as.dendrogram %>%
dendextend::set("branches_k_color", k=k) %>%
dendextend::set("branches_lwd", 1.2) %>%
dendextend::set("labels",NULL)
#' and plot it
plot(dend)
cluster = cutree(hc,k)
cluster = tibble::enframe(cluster,name=NULL,value="cluster")
df_orch_c = bind_cols(df_orch,cluster)
#' check how many samples per cluster
fct_count(factor(df_orch_c$cluster),sort = T)
box_clust_orch = df_orch_c %>%
#gather(Var, value,-cluster,-landuse) %>%
pivot_longer(!contains(c("landuse","cluster","texture")),
names_to = "Var", values_to = "value") %>%
ggplot(aes(y = value, x = as.factor(cluster) ))+
ggtitle("Boxplot of the main soil characteristics for each cluster. Orchards")+
xlab("clusters")+ylab(NULL)+
geom_boxplot()+
facet_wrap(~Var,scales = "free")+#,nrow = 2,ncol = 5
theme_classic()
box_clust_orch
#' create a dissimilarity matrix
dist = daisy(df_orch %>% select(-landuse,-texture), metric="gower",type=list(asym=asym))#
#' create a dissimilarity matrix
dist = daisy(df_orch , metric="gower",type=list(asym=asym))#
df_orch
asym
df_orch = filter(df,landuse == "Orchards") %>%
mutate(landuse = as.factor(landuse),texture = as.factor(texture))
asym=c(1,2)# 23 wich columns in the db will be treated as asymmetric binary
#' create a dissimilarity matrix
dist = daisy(df_orch , metric="gower",type=list(asym=asym))#
#' run the hierarchical clustering function to get an object hclust
hc = hclust(dist,method = "complete")
rmarkdown::render("script/08_cluster_analysis.R",knit_root_dir = getwd())
force(agrep)
force(glm)
install.packages("plotly")
